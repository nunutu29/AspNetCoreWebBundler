using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;

namespace AspNetCoreWebBundler
{
    /// <summary>
    ///  An MSBuild task for creating runtime settins during DEBUG.
    /// </summary>
    public class RuntimeWebBundlerSettingsTask : Task
    {
        private static readonly Lazy<Regex> ProjectLine = new Lazy<Regex>(() => new Regex(
            "^" // Beginning of line
            + "Project\\(\"(?<PROJECTTYPEGUID>.*)\"\\)"
            + "\\s*=\\s*" // Any amount of whitespace plus "=" plus any amount of whitespace
            + "\"(?<PROJECTNAME>.*)\""
            + "\\s*,\\s*" // Any amount of whitespace plus "," plus any amount of whitespace
            + "\"(?<RELATIVEPATH>.*)\""
            + "\\s*,\\s*" // Any amount of whitespace plus "," plus any amount of whitespace
            + "\"(?<PROJECTGUID>.*)\""
            + "$", // End-of-line
            RegexOptions.Compiled));

        /// <summary>
        /// The path where to write the generated code.
        /// </summary>
        [Required]
        public string OutputFile { get; set; }

        /// <summary>
        /// The path to the solution file. We need this to get the projects list.
        /// </summary>
        [Required]
        public string SolutionPath { get; set; }

        /// <summary>
        /// Execute the Task
        /// </summary>
        public override bool Execute()
        {
            var logger = new TaskLogWrapper(Log);

            try
            {
                var file = new FileInfo(OutputFile);

                logger.LogInformation("Begin creating " + file.Name);

                var projects = GetProjects(SolutionPath);
                var builder = new StringBuilder();

                builder.AppendLine("//------------------------------------------------------------------------------");
                builder.AppendLine("// <auto-generated>");
                builder.AppendFormat("// This code was generated by {0} ({1}).", Constants.PackageName, Constants.PackageVersion); 
                builder.AppendLine();
                builder.AppendLine("// </auto-generated>");
                builder.AppendLine("//------------------------------------------------------------------------------");
                builder.AppendLine();

                //builder.AppendLine("using System;");
                //builder.AppendLine("using System.Reflection;");

                var attrType = typeof(RuntimeWebBundlerProjectAttribute).FullName;

                // add all projects
                foreach (var project in projects)
                {
                    builder.AppendFormat("[assembly: {0}(\"{1}\", @\"{2}\")]", attrType, project.Name, project.Directory);
                    builder.AppendLine();
                }

                // write the file
                FileHelper.Write(file.FullName, builder.ToString());

                logger.LogInformation("Done creating " + file.Name);
            }
            catch (Exception ex)
            {
                logger.LogError(ex);
                return false;
            }

            return true;
        }

        private static List<ProjectItem> GetProjects(string solutionPath)
        {
            var solution = new FileInfo(solutionPath);

            var projects = new List<ProjectItem>();

            using (var fileStream = solution.OpenRead())
            {
                using (var reader = new StreamReader(fileStream, Encoding.GetEncoding(0)))
                {
                    string line;

                    while ((line = reader.ReadLine()) != null)
                    {
                        line = line.Trim();

                        if (line.StartsWith("Project(", StringComparison.Ordinal))
                        {
                            var item = ParseProjectFirstLine(line);

                            var fullPath = Path.Combine(solution.DirectoryName!, item.RelativePath);
                            fullPath = Path.GetFullPath(fullPath);

                            item.Directory = Path.GetDirectoryName(fullPath);

                            projects.Add(item);
                        }
                    }

                }
            }

            return projects;
        }

        private static ProjectItem ParseProjectFirstLine(string line)
        {
            var match = ProjectLine.Value.Match(line);

            // match.Groups["PROJECTTYPEGUID"].Value.Trim();
            // match.Groups["PROJECTNAME"].Value.Trim();
            // match.Groups["RELATIVEPATH"].Value.Trim();
            // match.Groups["PROJECTGUID"].Value.Trim();

            return new ProjectItem
            {
                Name = match.Groups["PROJECTNAME"].Value.Trim(),
                RelativePath = match.Groups["RELATIVEPATH"].Value.Trim()
            };
        }

        private class ProjectItem
        {
            public string Name { get; set; }
            public string RelativePath { get; set; }
            public string Directory { get; set; }
        }
    }
}